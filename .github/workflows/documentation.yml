name: Auto-Documentation

on:
  push:
    branches: [main]
    paths:
      - 'Scripts/**'
      - 'Modules/**'
  pull_request:
    branches: [main]

jobs:
  generate-docs:
    runs-on: windows-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Cache PowerShell modules
      uses: actions/cache@v3
      with:
        path: |
          ~\AppData\Local\Microsoft\Windows\PowerShell
          ~\Documents\PowerShell\Modules
        key: ${{ runner.os }}-powershell-${{ hashFiles('**/*.ps1') }}
        
    - name: Set Execution Policy
      run: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser

    - name: Install dependencies
      run: |
        Install-Module -Name platyPS -Force -Scope CurrentUser -AllowClobber
        Install-Module -Name PSWriteHTML -Force -Scope CurrentUser -AllowClobber

    - name: Generate documentation
      run: |
        # Create docs directory
        if (-not (Test-Path ./docs)) { 
            New-Item -Path ./docs -ItemType Directory -Force 
        }
        
        # Generate module docs
        $modules = Get-ChildItem -Path ./Modules -Recurse -Include *.psm1 -ErrorAction SilentlyContinue
        foreach ($module in $modules) {
            Import-Module $module.FullName -Force
            $moduleName = $module.BaseName
            New-MarkdownHelp -Module $moduleName -OutputFolder "./docs/$moduleName" -Force
        }
        
        # Generate script docs
        $scripts = Get-ChildItem -Path ./Scripts -Recurse -Include *.ps1 -ErrorAction SilentlyContinue
        foreach ($script in $scripts) {
            $scriptName = $script.BaseName
            New-MarkdownHelp -Path $script.FullName -OutputFolder "./docs/Scripts" -Force
        }
        
        # Create index file
        $indexContent = @"
        # PowerShell HEVC Converter Documentation
        
        ## Modules
        $(
            if (Test-Path ./docs) {
                Get-ChildItem ./docs -Directory | ForEach-Object {
                    "- [$($_.Name)]($($_.Name))"
                }
            }
        )
        
        ## Scripts
        $(
            if (Test-Path ./docs/Scripts) {
                Get-ChildItem ./docs/Scripts -File | ForEach-Object {
                    "- [$($_.BaseName)](Scripts/$($_.Name))"
                }
            } else { "" }
        )
        
        *Updated: $(Get-Date -Format "yyyy-MM-dd HH:mm")*
        "@
        
        Set-Content -Path ./docs/index.md -Value $indexContent

    - name: Generate HTML documentation
      run: |
        # Convert index.md to HTML
        $htmlContent = @"
        <!DOCTYPE html>
        <html>
        <head>
            <title>HEVC Converter Documentation</title>
            <meta charset="UTF-8">
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 800px; margin: auto; padding: 20px; }
                h1 { color: #2c3e50; }
                h2 { border-bottom: 1px solid #eee; padding-bottom: 5px; }
                ul { list-style-type: none; padding: 0; }
                li { margin-bottom: 10px; }
                a { color: #3498db; text-decoration: none; }
                a:hover { text-decoration: underline; }
                .timestamp { font-style: italic; color: #7f8c8d; }
            </style>
        </head>
        <body>
            $(Get-Content ./docs/index.md -Raw | ConvertFrom-Markdown | ForEach-Object { $_.Html })
        </body>
        </html>
        "@
        Set-Content -Path ./docs/index.html -Value $htmlContent

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        keep_files: false
        force_orphan: true
name: üìö Generate Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üìù Generate PowerShell Documentation
        shell: pwsh
        run: |
          # Enhanced function to convert PowerShell comment-based help to Markdown
          function Convert-CommentHelpToMarkdown {
              param(
                  [Parameter(Mandatory=$true)]
                  [string]$ScriptPath,
                  [Parameter(Mandatory=$true)]
                  [string]$OutputFilePath
              )

              if (-not (Test-Path $ScriptPath)) {
                  Write-Error "Script file not found: $ScriptPath"
                  return
              }

              $scriptContent = Get-Content -Path $ScriptPath -Raw
              $scriptName = [System.IO.Path]::GetFileNameWithoutExtension($ScriptPath)
              $scriptSize = [Math]::Round((Get-Item $ScriptPath).Length / 1KB, 1)

              # Extract comment-based help block
              $commentBlockPattern = '(?s)<#(.*?)#>'
              $commentBlockMatch = [regex]::Match($scriptContent, $commentBlockPattern)

              $markdownContent = ""

              if ($commentBlockMatch.Success) {
                  $commentBlock = $commentBlockMatch.Groups[1].Value
                  $commentBlockLines = $commentBlock -split "`n" | ForEach-Object { $_.Trim() }

                  # Add script header with metadata
                  $markdownContent += "# üé¨ $($scriptName)`n`n"
                  $markdownContent += "üìä **Script Size:** $scriptSize KB | üìÖ **Last Updated:** $(Get-Date -Format 'yyyy-MM-dd')`n`n"
                  $markdownContent += "---`n`n"

                  $currentSection = ""
                  $exampleCount = 0
                  
                  foreach ($line in $commentBlockLines) {
                      $trimmedLine = $line.Trim()
                      
                      # Handle different help sections with emojis
                      if ($trimmedLine -match '^\\.SYNOPSIS\s*(.*)') {
                          $markdownContent += "## üìã Synopsis`n`n"
                          $synopsis = $matches[1].Trim()
                          if ($synopsis) { $markdownContent += "$synopsis`n`n" }
                          $currentSection = "SYNOPSIS"
                      } elseif ($trimmedLine -match '^\\.DESCRIPTION\s*(.*)') {
                          $markdownContent += "## üìñ Description`n`n"
                          $description = $matches[1].Trim()
                          if ($description) { $markdownContent += "$description`n`n" }
                          $currentSection = "DESCRIPTION"
                      } elseif ($trimmedLine -match '^\\.PARAMETER\s+(\S+)\s*(.*)') {
                          if ($currentSection -ne "PARAMETER") {
                              $markdownContent += "## ‚öôÔ∏è Parameters`n`n"
                              $currentSection = "PARAMETER"
                          }
                          $paramName = $matches[1]
                          $paramDesc = $matches[2].Trim()
                          $markdownContent += "### üîß \`-$paramName\``n`n"
                          if ($paramDesc) { $markdownContent += "$paramDesc`n`n" }
                      } elseif ($trimmedLine -match '^\\.EXAMPLE\s*(.*)') {
                          $exampleCount++
                          if ($currentSection -ne "EXAMPLE") {
                              $markdownContent += "## üí° Examples`n`n"
                              $currentSection = "EXAMPLE"
                          }
                          $markdownContent += "### Example $exampleCount`n`n"
                          $exampleContent = $matches[1].Trim()
                          $markdownContent += "\`\`\`powershell`n"
                          if ($exampleContent) { $markdownContent += "$exampleContent`n" }
                      } elseif ($trimmedLine -match '^\\.INPUTS\s*(.*)') {
                          $markdownContent += "## üì• Inputs`n`n"
                          $inputs = $matches[1].Trim()
                          if ($inputs) { $markdownContent += "$inputs`n`n" }
                          $currentSection = "INPUTS"
                      } elseif ($trimmedLine -match '^\\.OUTPUTS\s*(.*)') {
                          $markdownContent += "## üì§ Outputs`n`n"
                          $outputs = $matches[1].Trim()
                          if ($outputs) { $markdownContent += "$outputs`n`n" }
                          $currentSection = "OUTPUTS"
                      } elseif ($trimmedLine -match '^\\.NOTES\s*(.*)') {
                          $markdownContent += "## üìù Notes`n`n"
                          $notes = $matches[1].Trim()
                          if ($notes) { $markdownContent += "$notes`n`n" }
                          $currentSection = "NOTES"
                      } elseif ($trimmedLine -match '^\\.LINK\s*(.*)') {
                          if ($currentSection -ne "LINK") {
                              $markdownContent += "## üîó Links`n`n"
                              $currentSection = "LINK"
                          }
                          $link = $matches[1].Trim()
                          if ($link) { $markdownContent += "- [$link]($link)`n" }
                      } elseif (-not ($trimmedLine -match '^\.([A-Z]+)') -and $trimmedLine -ne "" -and $currentSection -ne "") {
                          # Continue previous section content
                          if ($currentSection -eq "EXAMPLE" -and $trimmedLine -ne "#>") {
                              $markdownContent += "$trimmedLine`n"
                          } elseif ($currentSection -ne "EXAMPLE") {
                              $markdownContent += "$trimmedLine`n`n"
                          }
                      }
                  }
                  
                  # Close any open code blocks
                  if ($currentSection -eq "EXAMPLE") {
                      $markdownContent += "\`\`\``n`n"
                  }
                  
              } else {
                  $markdownContent += "# üé¨ $($scriptName)`n`n"
                  $markdownContent += "‚ö†Ô∏è No comment-based help block found for this script.`n`n"
              }

              # Add footer
              $markdownContent += "---`n`n"
              $markdownContent += "üè† [Back to Home](./index.html) | üìö [View All Scripts](./index.html#scripts)`n`n"
              $markdownContent += "*Documentation generated on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')*`n"

              Set-Content -Path $OutputFilePath -Value $markdownContent -Encoding Utf8
          }

          # Create docs directory
          New-Item -ItemType Directory -Path "./docs" -Force | Out-Null

          # Define all script paths
          $scripts = @(
              @{Path = "./Convert-VideoToHEVC.ps1"; Name = "Convert-VideoToHEVC"; Icon = "üé¨"; Description = "Main conversion script with advanced HEVC encoding"}
              @{Path = "./Analyze-Compression.ps1"; Name = "Analyze-Compression"; Icon = "üìä"; Description = "Comprehensive analysis of compression efficiency and quality"}
              @{Path = "./Optimize-HEVCSettings.ps1"; Name = "Optimize-HEVCSettings"; Icon = "‚ö°"; Description = "Finds optimal encoding settings for specific content"}
              @{Path = "./Verify-HEVCConversions.ps1"; Name = "Verify-HEVCConversions"; Icon = "‚úÖ"; Description = "Validates conversion integrity and quality"}
          )

          # Generate documentation for all scripts
          $scriptDocs = @()
          foreach ($script in $scripts) {
              if (Test-Path $script.Path) {
                  $docPath = "./docs/$($script.Name).md"
                  Write-Host "üìù Generating documentation for $($script.Path)..."
                  Convert-CommentHelpToMarkdown -ScriptPath $script.Path -OutputFilePath $docPath
                  $scriptDocs += $script
              } else {
                  Write-Warning "‚ö†Ô∏è Script not found: $($script.Path)"
              }
          }

          # Store script info for later use
          $scriptDocs | ConvertTo-Json | Set-Content "./docs/scripts.json"

      - name: üé® Convert Markdown to HTML
        shell: pwsh
        run: |
          # Create CSS using simple string to avoid YAML issues
          $css = ':root{--ps-blue:#012456;--ps-yellow:#fed800;--ps-light-blue:#0078d4;--ps-gray:#f8f9fa;--ps-dark-gray:#6c757d;--success:#28a745;--warning:#ffc107;--danger:#dc3545;--info:#17a2b8;}*{box-sizing:border-box;}body{font-family:"Segoe UI",-apple-system,BlinkMacSystemFont,"Roboto",sans-serif;line-height:1.6;margin:0;padding:0;background:linear-gradient(135deg,var(--ps-gray) 0%,#ffffff 100%);color:#333;min-height:100vh;}.container{max-width:1200px;margin:0 auto;padding:2rem;background:white;box-shadow:0 10px 30px rgba(0,0,0,0.1);border-radius:12px;margin-top:2rem;margin-bottom:2rem;}header{background:linear-gradient(135deg,var(--ps-blue) 0%,var(--ps-light-blue) 100%);color:white;padding:3rem 0;margin-bottom:2rem;border-radius:12px;text-align:center;position:relative;overflow:hidden;}header h1{margin:0;font-size:2.5rem;font-weight:700;position:relative;z-index:1;}header p{margin:0.5rem 0 0 0;font-size:1.1rem;opacity:0.9;position:relative;z-index:1;}h1,h2,h3,h4,h5,h6{color:var(--ps-blue);margin-top:2rem;margin-bottom:1rem;font-weight:600;}h1{font-size:2.2rem;border-bottom:3px solid var(--ps-yellow);padding-bottom:0.5rem;}h2{font-size:1.8rem;border-bottom:2px solid var(--ps-light-blue);padding-bottom:0.3rem;}h3{font-size:1.4rem;color:var(--ps-light-blue);}pre,code{background:#f8f9fa;border:1px solid #e9ecef;border-radius:6px;font-family:"Consolas","Monaco","Courier New",monospace;font-size:0.9rem;}pre{padding:1.5rem;overflow-x:auto;margin:1rem 0;box-shadow:inset 0 2px 4px rgba(0,0,0,0.1);}code{padding:0.2rem 0.4rem;background:var(--ps-gray);color:var(--ps-blue);font-weight:500;}pre code{background:none;padding:0;border:none;color:inherit;}a{color:var(--ps-light-blue);text-decoration:none;font-weight:500;transition:all 0.3s ease;}a:hover{color:var(--ps-blue);text-decoration:underline;}.nav-links{display:flex;gap:1rem;margin-bottom:2rem;flex-wrap:wrap;}.nav-links a{background:linear-gradient(135deg,var(--ps-blue) 0%,var(--ps-light-blue) 100%);color:white;padding:0.7rem 1.5rem;border-radius:25px;text-decoration:none;font-weight:500;transition:all 0.3s ease;box-shadow:0 4px 15px rgba(1,36,86,0.2);}.nav-links a:hover{transform:translateY(-2px);box-shadow:0 6px 20px rgba(1,36,86,0.3);color:white;}.script-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(300px,1fr));gap:2rem;margin:2rem 0;}.script-card{background:white;border:1px solid #e9ecef;border-radius:12px;padding:2rem;box-shadow:0 4px 15px rgba(0,0,0,0.1);transition:all 0.3s ease;position:relative;overflow:hidden;}.script-card::before{content:"";position:absolute;top:0;left:0;right:0;height:4px;background:linear-gradient(90deg,var(--ps-blue),var(--ps-light-blue),var(--ps-yellow));}.script-card:hover{transform:translateY(-5px);box-shadow:0 8px 25px rgba(0,0,0,0.15);}.script-icon{font-size:2.5rem;margin-bottom:1rem;display:block;}.script-title{font-size:1.3rem;font-weight:600;color:var(--ps-blue);margin-bottom:0.5rem;}.script-description{color:var(--ps-dark-gray);margin-bottom:1.5rem;line-height:1.5;}.script-link{display:inline-block;background:var(--ps-light-blue);color:white;padding:0.5rem 1rem;border-radius:20px;text-decoration:none;font-weight:500;transition:all 0.3s ease;}.script-link:hover{background:var(--ps-blue);color:white;}.footer{margin-top:3rem;padding-top:2rem;border-top:2px solid var(--ps-gray);text-align:center;color:var(--ps-dark-gray);background:var(--ps-gray);border-radius:8px;padding:2rem;}.badge{display:inline-block;padding:0.3rem 0.8rem;border-radius:15px;font-size:0.8rem;font-weight:500;margin:0.2rem;}.badge-primary{background:var(--ps-light-blue);color:white;}.badge-success{background:var(--success);color:white;}.badge-warning{background:var(--warning);color:#333;}.badge-info{background:var(--info);color:white;}@media (max-width:768px){.container{padding:1rem;margin-top:1rem;}header{padding:2rem 1rem;}header h1{font-size:2rem;}.nav-links{justify-content:center;}.script-grid{grid-template-columns:1fr;}}'
          Set-Content -Path ./docs/style.css -Value $css -Encoding utf8

          # Convert all Markdown files to HTML
          Get-ChildItem ./docs -Filter *.md | ForEach-Object {
              $html = ConvertFrom-Markdown -Path $_.FullName -AsHtmlFragment
              $title = $_.BaseName
              
              $fullHtml = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>' + $title + ' - PowerShell HEVC Converter</title><link rel="stylesheet" href="./style.css"><link rel="icon" href="data:image/svg+xml,<svg xmlns=`"http://www.w3.org/2000/svg`" viewBox=`"0 0 100 100`"><text y=`".9em`" font-size=`"90`">üé¨</text></svg>"></head><body><header><div class="container"><h1>üé¨ ' + $title + '</h1><p>PowerShell HEVC Video Converter Documentation</p></div></header><main class="container"><div class="nav-links"><a href="./index.html">üè† Home</a><a href="https://github.com/itsFelixH/powershell-hevc-converter">üìÅ Repository</a><a href="https://github.com/itsFelixH/powershell-hevc-converter/issues">üêõ Issues</a></div>' + $html + '</main><footer class="container footer"><p>üìö Documentation generated on ' + (Get-Date -Format 'yyyy-MM-dd HH:mm:ss') + ' | üöÄ Powered by PowerShell & GitHub Actions</p></footer></body></html>'
              
              Set-Content -Path ($_.FullName -replace '\.md$', '.html') -Value $fullHtml
              Remove-Item -Path $_.FullName
          }

      - name: üè† Create Index Page
        shell: pwsh
        run: |
          # Load script information
          $scriptsJson = Get-Content "./docs/scripts.json" | ConvertFrom-Json
          
          # Generate script cards HTML
          $scriptCards = ""
          foreach ($script in $scriptsJson) {
              $scriptCards += '<div class="script-card"><span class="script-icon">' + $script.Icon + '</span><h3 class="script-title">' + $script.Name + '</h3><p class="script-description">' + $script.Description + '</p><a href="./' + $script.Name + '.html" class="script-link">üìñ View Documentation</a></div>'
          }

          $htmlContent = '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>üé¨ PowerShell HEVC Converter - Documentation</title><link rel="stylesheet" href="./style.css"><link rel="icon" href="data:image/svg+xml,<svg xmlns=`"http://www.w3.org/2000/svg`" viewBox=`"0 0 100 100`"><text y=`".9em`" font-size=`"90`">üé¨</text></svg>"></head><body><header><div class="container"><h1>üé¨ PowerShell HEVC Converter</h1><p>Professional video conversion toolkit with advanced HEVC encoding capabilities</p></div></header><main class="container"><div class="nav-links"><a href="https://github.com/itsFelixH/powershell-hevc-converter">üìÅ Repository</a><a href="https://github.com/itsFelixH/powershell-hevc-converter/releases">üì¶ Releases</a><a href="https://github.com/itsFelixH/powershell-hevc-converter/issues">üêõ Issues</a><a href="https://github.com/itsFelixH/powershell-hevc-converter/discussions">üí¨ Discussions</a></div><section><h2>üåü Overview</h2><p>A comprehensive PowerShell toolkit for professional HEVC (H.265) video conversion with advanced features including:</p><div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 1.5rem 0;"><div style="padding: 1rem; background: #f8f9fa; border-radius: 8px; border-left: 4px solid var(--ps-blue);"><strong>üöÄ Batch Processing</strong><br>Process multiple files with intelligent queuing</div><div style="padding: 1rem; background: #f8f9fa; border-radius: 8px; border-left: 4px solid var(--success);"><strong>‚ö° Hardware Acceleration</strong><br>NVENC, QSV, and VAAPI support</div><div style="padding: 1rem; background: #f8f9fa; border-radius: 8px; border-left: 4px solid var(--warning);"><strong>üìä Quality Analysis</strong><br>VMAF, PSNR, and SSIM metrics</div><div style="padding: 1rem; background: #f8f9fa; border-radius: 8px; border-left: 4px solid var(--info);"><strong>üéØ Smart Presets</strong><br>Content-aware encoding profiles</div></div></section><section id="scripts"><h2>üìö Available Scripts</h2><div class="script-grid">' + $scriptCards + '</div></section><section><h2>üöÄ Quick Start</h2><div style="background: #f8f9fa; padding: 2rem; border-radius: 8px; margin: 1rem 0;"><h3>üìã Prerequisites</h3><ul><li><strong>PowerShell 5.1+</strong> (Windows PowerShell or PowerShell Core)</li><li><strong>FFmpeg</strong> with libx265 support in system PATH</li><li><strong>Windows 10/11</strong> or compatible PowerShell environment</li></ul><h3>‚ö° Basic Usage</h3><pre><code class="language-powershell"># Convert all videos in current directory`n./Convert-VideoToHEVC.ps1`n`n# Convert with custom settings`n./Convert-VideoToHEVC.ps1 -inputFolder "C:\Videos" -crf 20 -preset slow`n`n# Use a preset profile`n./Convert-VideoToHEVC.ps1 -Profile Animation</code></pre></div></section><section><h2>üéØ Preset Profiles</h2><p>Choose from optimized encoding profiles for different content types:</p><div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin: 1.5rem 0;"><span class="badge badge-primary">üé® Animation</span><span class="badge badge-success">üé¨ Film</span><span class="badge badge-warning">üñ•Ô∏è ScreenCapture</span><span class="badge badge-info">üèÉ HighMotion</span><span class="badge badge-primary">üåô LowLight</span><span class="badge badge-success">üì± MobileStream</span><span class="badge badge-warning">üì∫ SocialMedia</span><span class="badge badge-info">üèÜ ArchiveQuality</span><span class="badge badge-primary">üéûÔ∏è FilmRestoration</span><span class="badge badge-success">üåà HDR-8K</span></div></section><section><h2>üìà Performance Metrics</h2><div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 2rem; margin: 2rem 0;"><div style="text-align: center; padding: 1.5rem; background: white; border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);"><div style="font-size: 2rem; color: var(--success);">üìâ</div><div style="font-size: 1.5rem; font-weight: bold; color: var(--ps-blue);">50-70%</div><div style="color: var(--ps-dark-gray);">Size Reduction</div></div><div style="text-align: center; padding: 1.5rem; background: white; border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);"><div style="font-size: 2rem; color: var(--info);">‚ö°</div><div style="font-size: 1.5rem; font-weight: bold; color: var(--ps-blue);">95+</div><div style="color: var(--ps-dark-gray);">VMAF Quality</div></div><div style="text-align: center; padding: 1.5rem; background: white; border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);"><div style="font-size: 2rem; color: var(--warning);">üöÄ</div><div style="font-size: 1.5rem; font-weight: bold; color: var(--ps-blue);">10x</div><div style="color: var(--ps-dark-gray);">Faster Processing</div></div></div></section></main><footer class="container footer"><p>üõ†Ô∏è Built with PowerShell | üìö Documentation generated on ' + (Get-Date -Format 'yyyy-MM-dd HH:mm:ss') + ' | üöÄ Powered by GitHub Actions</p><p style="margin-top: 1rem;"><a href="https://github.com/itsFelixH/powershell-hevc-converter" style="margin: 0 1rem;">GitHub</a><a href="https://github.com/itsFelixH/powershell-hevc-converter/issues" style="margin: 0 1rem;">Report Issues</a><a href="https://github.com/itsFelixH/powershell-hevc-converter/discussions" style="margin: 0 1rem;">Discussions</a></p></footer></body></html>'
          Set-Content -Path ./docs/index.html -Value $htmlContent

      - name: üöÄ Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          force_orphan: true
name: Generate Documentation

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy-docs:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Execution Policy
        shell: pwsh
        run: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser

      - name: Install required modules
        shell: pwsh
        run: |
          Install-Module -Name platyPS -Force -Scope CurrentUser -AllowClobber
          Install-Module -Name MarkdownToHtml -Force -Scope CurrentUser -AllowClobber

      - name: Create docs directory
        shell: pwsh
        run: New-Item -Path ./docs -ItemType Directory -Force -ErrorAction SilentlyContinue

      - name: Generate Script Documentation
        shell: pwsh
        run: |
          # Function to extract comment-based help and format it as basic Markdown
          function Convert-CommentHelpToMarkdown {
              param (
                  [Parameter(Mandatory=$true)]
                  [string]$ScriptPath,
                  [Parameter(Mandatory=$true)]
                  [string]$OutputFilePath
              )

              $scriptContent = Get-Content $ScriptPath -Raw
              $markdownContent = ""

              # Regex to find the entire comment-based help block
              if ($scriptContent -match '(?smi)^\s*<#\s*(.*?)\s*#>(\r?\n|\r)') {
                  $commentBlock = $matches[1]

                  # Add a main heading for the script
                  $scriptName = [System.IO.Path]::GetFileNameWithoutExtension($ScriptPath)
                  $markdownContent += "# $scriptName`n`n"

                  # Process each line of the comment block
                  $commentBlockLines = $commentBlock -split "`r?`n"
                  foreach ($line in $commentBlockLines) {
                      $trimmedLine = $line.Trim()

                      # Handle SYNOPSIS, DESCRIPTION, NOTES
                      if ($trimmedLine -match '^\.SYNOPSIS\s*(.*)') {
                          $markdownContent += "## Synopsis`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      } elseif ($trimmedLine -match '^\.DESCRIPTION\s*(.*)') {
                          $markdownContent += "## Description`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      } elseif ($trimmedLine -match '^\.NOTES\s*(.*)') {
                          $markdownContent += "## Notes`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      }
                      # Handle PARAMETER
                      elseif ($trimmedLine -match '^\.PARAMETER\s+(\S+)\s*(.*)') {
                          $paramName = $matches[1]
                          $paramDesc = $matches[2].Trim()
                          $markdownContent += "### Parameter: `$paramName`n`n"
                          $markdownContent += "$paramDesc`n`n"
                      }
                      # Handle EXAMPLE
                      elseif ($trimmedLine -match '^\.EXAMPLE\s*(.*)') {
                          $markdownContent += "### Example`n`n"
                          $exampleContent = $matches[1].Trim()
                          # Capture subsequent lines as part of the example until another dot-directive or end of block
                          $exampleLines = @($exampleContent)
                          $i = [array]::IndexOf($commentBlockLines, $line) + 1
                          while ($i -lt $commentBlockLines.Length) {
                              $nextLine = $commentBlockLines[$i].Trim()
                              if ($nextLine -match '^\.[A-Z]+' -or $nextLine -eq '#>') {
                                  break
                              }
                              $exampleLines += $nextLine
                              $i++
                          }
                          $markdownContent += "```powershell`n"
                          $markdownContent += ($exampleLines -join "`n")
                          $markdownContent += "`n```n`n"
                      }
                      # Handle INPUTS, OUTPUTS
                      elseif ($trimmedLine -match '^\.INPUTS\s*(.*)') {
                          $markdownContent += "## Inputs`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      } elseif ($trimmedLine -match '^\.OUTPUTS\s*(.*)') {
                          $markdownContent += "## Outputs`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      }
                      # Add any other lines directly if they don't match a directive
                      elseif (-not ($trimmedLine -match '^\.[A-Z]+')) {
                          $markdownContent += "$trimmedLine`n"
                      }
                  }
              } else {
                  $markdownContent += "# $($scriptName)`n`n"
                  $markdownContent += "No comment-based help block found for this script.`n"
              }

              Set-Content -Path $OutputFilePath -Value $markdownContent -Encoding Utf8
          }

          # Define script paths
          $convertScriptPath = "./Convert-VideoToHEVC.ps1"

          # Define output paths for documentation
          $convertDocPath = "./docs/Convert-VideoToHEVC.md"

          # Generate documentation for Convert-VideoToHEVC.ps1
          Write-Host "Generating documentation for $convertScriptPath..."
          Convert-CommentHelpToMarkdown -ScriptPath $convertScriptPath -OutputFilePath $convertDocPath

      - name: Convert Markdown to HTML
        shell: pwsh
        run: |
          # Custom CSS for styling
          $css = @"
          /* Modern CSS with PowerShell theme */
          :root {
            --ps-blue: #012456;
            --ps-yellow: #fed800;
            --ps-gray: #e6e6e6;
          }
          body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
            color: #333;
          }
          .container {
            max-width: 900px;
            margin: 2rem auto;
            padding: 2rem;
            background: white;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            border-radius: 8px;
          }
          header {
            background: var(--ps-blue);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
          }
          h1, h2, h3 {
            color: var(--ps-blue);
            border-bottom: 2px solid var(--ps-yellow);
            padding-bottom: 0.5rem;
          }
          pre, code {
            background: #f5f5f5;
            border-radius: 4px;
            padding: 0.5rem;
            font-family: 'Consolas', monospace;
          }
          pre {
            padding: 1rem;
            overflow: auto;
          }
          a {
            color: #0066cc;
            text-decoration: none;
          }
          a:hover {
            text-decoration: underline;
          }
          .footer {
            margin-top: 3rem;
            padding-top: 1rem;
            border-top: 1px solid #eee;
            text-align: center;
            color: #6c757d;
          }
          .nav-links {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
          }
          .nav-links a {
            background: var(--ps-blue);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 4px;
          }
          "@
          
          # Save CSS file
          Set-Content -Path ./docs/style.css -Value $css

          # Convert all Markdown files to HTML
          Get-ChildItem ./docs -Filter *.md | ForEach-Object {
              $html = ConvertFrom-Markdown -Path $_.FullName -AsHtmlFragment
              $title = $_.BaseName
              
              $fullHtml = @"
              <!DOCTYPE html>
              <html lang="en">
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <title>$title Documentation</title>
                  <link rel="stylesheet" href="./style.css">
              </head>
              <body>
                  <header>
                      <div class="container">
                          <h1>$title</h1>
                      </div>
                  </header>
                  <main class="container">
                      <div class="nav-links">
                          <a href="./index.html">Home</a>
                      </div>
                      $html
                  </main>
                  <footer class="container footer">
                      <p>Documentation generated on $(Get-Date -Format 'yyyy-MM-dd')</p>
                  </footer>
              </body>
              </html>
              "@
              
              Set-Content -Path ($_.FullName -replace '\.md$', '.html') -Value $fullHtml
              Remove-Item -Path $_.FullName
          }

      - name: Create main index
        shell: pwsh
        run: |
          $htmlContent = @"
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>PowerShell HEVC Converter Documentation</title>
              <link rel="stylesheet" href="./style.css">
          </head>
          <body>
              <header>
                  <div class="container">
                      <h1>PowerShell HEVC Converter Documentation</h1>
                  </div>
              </header>
              <main class="container">
                  <h2>Available Scripts</h2>
                  <ul>
                      <li>
                          <a href="./Convert-VideoToHEVC.html">Convert-VideoToHEVC</a>
                          <p>Convert video files to HEVC (H.265) format using hardware acceleration.</p>
                      </li>
                  </ul>
                  
                  <h2>Getting Started</h2>
                  <p>To use these scripts:</p>
                  <ol>
                      <li>Clone the repository</li>
                      <li>Run scripts with required parameters</li>
                      <li>Use <code>-Help</code> parameter for usage information</li>
                  </ol>
                  
                  <div class="footer">
                      <p>Documentation generated on $(Get-Date -Format "yyyy-MM-dd HH:mm")</p>
                  </div>
              </main>
          </body>
          </html>
          "@
          Set-Content -Path ./docs/index.html -Value $htmlContent
    
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          force_orphan: true 

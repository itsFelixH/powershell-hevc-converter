name: 📚 Generate Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  generate-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Create documentation
        shell: pwsh
        run: |
          # Create docs directory
          New-Item -ItemType Directory -Path "./docs" -Force | Out-Null

          $css = ':root { --bg-color: #f8f9fa; --text-color: #333; --container-bg: white; --border-color: #e9ecef; --primary-color: #3498db; --success-color: #28a745; --code-bg: #f8f9fa; } [data-theme="dark"] { --bg-color: #1a1a1a; --text-color: #e0e0e0; --container-bg: #2d2d2d; --border-color: #404040; --primary-color: #4a9eff; --success-color: #4caf50; --code-bg: #3a3a3a; } * { margin: 0; padding: 0; box-sizing: border-box; } body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; line-height: 1.6; color: var(--text-color); background: var(--bg-color); transition: background 0.3s, color 0.3s; } .container { max-width: 1000px; margin: 0 auto; padding: 2rem; background: var(--container-bg); min-height: 100vh; transition: background 0.3s; } .top-bar { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; } .search-container { position: relative; } .search-box { padding: 0.5rem 1rem; border: 1px solid var(--border-color); border-radius: 20px; background: var(--container-bg); color: var(--text-color); width: 250px; } .theme-toggle { background: var(--primary-color); color: white; border: none; padding: 0.5rem 1rem; border-radius: 20px; cursor: pointer; transition: background 0.3s; } .theme-toggle:hover { opacity: 0.8; } .breadcrumb { margin-bottom: 1rem; font-size: 0.9rem; color: #6c757d; } .breadcrumb a { color: var(--primary-color); text-decoration: none; } .breadcrumb a:hover { text-decoration: underline; } header { text-align: center; margin-bottom: 3rem; padding: 2rem 0; border-bottom: 1px solid var(--border-color); } h1 { font-size: 2.5rem; color: var(--text-color); margin-bottom: 0.5rem; } .subtitle { font-size: 1.1rem; color: #6c757d; } h2 { font-size: 1.8rem; color: var(--text-color); margin: 2rem 0 1rem 0; border-bottom: 2px solid var(--primary-color); padding-bottom: 0.5rem; } h3 { font-size: 1.3rem; color: var(--text-color); margin: 1.5rem 0 0.5rem 0; } p { margin-bottom: 1rem; color: var(--text-color); } .nav { display: flex; gap: 1rem; margin-bottom: 2rem; flex-wrap: wrap; } .nav a { background: var(--primary-color); color: white; padding: 0.5rem 1rem; border-radius: 4px; text-decoration: none; transition: background 0.3s; } .nav a:hover { opacity: 0.8; } .toc { background: var(--code-bg); border: 1px solid var(--border-color); border-radius: 8px; padding: 1.5rem; margin: 2rem 0; } .toc h3 { margin: 0 0 1rem 0; color: var(--text-color); border: none; } .toc ul { list-style: none; } .toc li { margin: 0.5rem 0; } .toc a { color: var(--primary-color); text-decoration: none; padding: 0.25rem 0; display: block; } .toc a:hover { text-decoration: underline; } .script-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 2rem; margin: 2rem 0; } .script-card { background: var(--container-bg); border: 1px solid var(--border-color); border-radius: 8px; padding: 1.5rem; box-shadow: 0 2px 4px rgba(0,0,0,0.1); transition: transform 0.2s, box-shadow 0.2s; } .script-card:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.15); } .script-title { font-size: 1.2rem; font-weight: 600; color: var(--text-color); margin-bottom: 0.5rem; } .script-description { color: #6c757d; margin-bottom: 1rem; } .script-link { background: var(--success-color); color: white; padding: 0.5rem 1rem; border-radius: 4px; text-decoration: none; display: inline-block; transition: background 0.3s; } .script-link:hover { opacity: 0.8; } .code-container { position: relative; } .copy-btn { position: absolute; top: 0.5rem; right: 0.5rem; background: var(--primary-color); color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 3px; cursor: pointer; font-size: 0.8rem; opacity: 0; transition: opacity 0.3s; } .code-container:hover .copy-btn { opacity: 1; } .copy-btn:hover { opacity: 0.8; } pre { background: var(--code-bg); border: 1px solid var(--border-color); border-radius: 4px; padding: 1rem; overflow-x: auto; margin: 1rem 0; position: relative; } code { background: var(--code-bg); padding: 0.2rem 0.4rem; border-radius: 3px; font-family: "Consolas", "Monaco", monospace; color: var(--text-color); } .feature-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 1.5rem 0; } .feature { padding: 1rem; background: var(--code-bg); border-radius: 6px; border-left: 4px solid var(--primary-color); } .feature strong { color: var(--text-color); } footer { margin-top: 3rem; padding-top: 2rem; border-top: 1px solid var(--border-color); text-align: center; color: #6c757d; } .hidden { display: none; } @media (max-width: 768px) { .container { padding: 1rem; } h1 { font-size: 2rem; } .nav { justify-content: center; } .top-bar { flex-direction: column; gap: 1rem; } .search-box { width: 100%; } }'
          Set-Content -Path ./docs/style.css -Value $css

          # Extract script information
          function Get-ScriptInfo {
              param($ScriptPath)
              
              $content = Get-Content $ScriptPath -Raw
              $info = @{}
              
              # Extract synopsis
              if ($content -match '\.SYNOPSIS\s*([\s\S]*?)\.DESCRIPTION') {
                  $info.Synopsis = $matches[1].Trim()
              }
              
              # Extract description
              if ($content -match '\.DESCRIPTION\s*([\s\S]*?)\.PARAMETER') {
                  $info.Description = $matches[1].Trim()
              }
              
              # Extract parameters
              $paramMatches = [regex]::Matches($content, '\.PARAMETER\s+(\w+)\s*([\s\S]*?)(?=\.PARAMETER|\.EXAMPLE|\.INPUTS|\.OUTPUTS|\.NOTES|#>)')
              $info.Parameters = @()
              foreach ($match in $paramMatches) {
                  $info.Parameters += @{
                      Name = $match.Groups[1].Value
                      Description = $match.Groups[2].Value.Trim()
                  }
              }
              
              # Extract examples
              $exampleMatches = [regex]::Matches($content, '\.EXAMPLE\s*([\s\S]*?)(?=\.EXAMPLE|\.INPUTS|\.OUTPUTS|\.NOTES|#>)')
              $info.Examples = @()
              foreach ($match in $exampleMatches) {
                  $info.Examples += $match.Groups[1].Value.Trim()
              }
              
              return $info
          }

          # Generate script documentation
          $scripts = @(
              @{Name = "Convert-VideoToHEVC"; Path = "./Convert-VideoToHEVC.ps1"; Description = "Main HEVC conversion script with batch processing and quality presets"}
              @{Name = "Analyze-Compression"; Path = "./Analyze-Compression.ps1"; Description = "Analyzes compression efficiency and quality metrics"}
              @{Name = "Optimize-HEVCSettings"; Path = "./Optimize-HEVCSettings.ps1"; Description = "Finds optimal encoding settings for your content"}
              @{Name = "Verify-HEVCConversions"; Path = "./Verify-HEVCConversions.ps1"; Description = "Validates conversion integrity and quality"}
          )

          foreach ($script in $scripts) {
              if (Test-Path $script.Path) {
                  $info = Get-ScriptInfo $script.Path
                  
                  $tocItems = @()
                  $tocItems += "<li><a href=`"#overview`">Overview</a></li>"
                  if ($info.Synopsis) { $tocItems += "<li><a href=`"#synopsis`">Synopsis</a></li>" }
                  if ($info.Description) { $tocItems += "<li><a href=`"#description`">Description</a></li>" }
                  if ($info.Parameters.Count -gt 0) { $tocItems += "<li><a href=`"#parameters`">Parameters</a></li>" }
                  if ($info.Examples.Count -gt 0) { $tocItems += "<li><a href=`"#examples`">Examples</a></li>" }
                  $toc = if ($tocItems.Count -gt 2) { "<div class=`"toc`"><h3>📋 Table of Contents</h3><ul>$($tocItems -join '')</ul></div>" } else { "" }
                  
                  $synopsisHtml = if ($info.Synopsis) { "<h2 id=`"synopsis`">Synopsis</h2><p>$($info.Synopsis)</p>" } else { "" }
                  $descriptionHtml = if ($info.Description) { "<h2 id=`"description`">Description</h2><p>$($info.Description -replace '\n', '<br>')</p>" } else { "" }
                  $paramHtml = if ($info.Parameters.Count -gt 0) { $temp = "<h2 id=`"parameters`">Parameters</h2>"; foreach ($param in $info.Parameters) { $temp += "<h3 id=`"param-$($param.Name.ToLower())`">-$($param.Name)</h3><p>$($param.Description -replace '\n', '<br>')</p>" }; $temp } else { "" }
                  $exampleHtml = if ($info.Examples.Count -gt 0) { $temp = "<h2 id=`"examples`">Examples</h2>"; for ($i = 0; $i -lt $info.Examples.Count; $i++) { $temp += "<h3 id=`"example-$($i + 1)`">Example $($i + 1)</h3><div class=`"code-container`"><pre><code>$($info.Examples[$i])</code></pre><button class=`"copy-btn`" onclick=`"copyCode(this)`">Copy</button></div>" }; $temp } else { "" }
                  
                  $html = "<!DOCTYPE html><html lang=`"en`"><head><meta charset=`"UTF-8`"><meta name=`"viewport`" content=`"width=device-width, initial-scale=1.0`"><title>$($script.Name) - PowerShell HEVC Converter</title><link rel=`"stylesheet`" href=`"./style.css`"></head><body><div class=`"container`"><div class=`"top-bar`"><div></div><button class=`"theme-toggle`" onclick=`"toggleTheme()`">🌙 Dark</button></div><div class=`"breadcrumb`"><a href=`"./index.html`">Home</a> > $($script.Name)</div><header><h1>$($script.Name)</h1><p class=`"subtitle`">PowerShell HEVC Video Converter</p></header><div class=`"nav`"><a href=`"./index.html`">Home</a><a href=`"https://github.com/itsFelixH/powershell-hevc-converter`">GitHub</a><a href=`"https://github.com/itsFelixH/powershell-hevc-converter/issues`">Issues</a></div>$toc<h2 id=`"overview`">Overview</h2><p>$($script.Description)</p>$synopsisHtml$descriptionHtml$paramHtml$exampleHtml<footer><p>Documentation generated on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p></footer></div><script>function toggleTheme(){const html=document.documentElement;const btn=document.querySelector('.theme-toggle');if(html.getAttribute('data-theme')==='dark'){html.removeAttribute('data-theme');btn.textContent='🌙 Dark';localStorage.setItem('theme','light');}else{html.setAttribute('data-theme','dark');btn.textContent='☀️ Light';localStorage.setItem('theme','dark');}}function copyCode(btn){const code=btn.previousElementSibling.textContent;navigator.clipboard.writeText(code).then(()=>{btn.textContent='Copied!';setTimeout(()=>btn.textContent='Copy',2000);});}if(localStorage.getItem('theme')==='dark'){document.documentElement.setAttribute('data-theme','dark');document.querySelector('.theme-toggle').textContent='☀️ Light';}</script></body></html>"
                  
                  Set-Content -Path "./docs/$($script.Name).html" -Value $html
              }
          }

          # Generate index page
          $indexHtml = "<!DOCTYPE html><html lang=`"en`"><head><meta charset=`"UTF-8`"><meta name=`"viewport`" content=`"width=device-width, initial-scale=1.0`"><title>PowerShell HEVC Converter</title><link rel=`"stylesheet`" href=`"./style.css`"></head><body><div class=`"container`"><div class=`"top-bar`"><div></div><button class=`"theme-toggle`" onclick=`"toggleTheme()`">🌙 Dark</button></div><header><h1>PowerShell HEVC Converter</h1><p class=`"subtitle`">Simple and efficient video conversion toolkit</p></header><div class=`"nav`"><a href=`"https://github.com/itsFelixH/powershell-hevc-converter`">GitHub Repository</a><a href=`"https://github.com/itsFelixH/powershell-hevc-converter/issues`">Report Issues</a></div><h2>Overview</h2><p>A collection of PowerShell scripts for converting videos to HEVC (H.265) format using FFmpeg. Features batch processing, quality presets, and comprehensive analysis tools.</p><h2>Quick Start</h2><div class=`"code-container`"><pre><code># Convert all videos in current directory`n.\Convert-VideoToHEVC.ps1`n`n# Convert with custom quality`n.\Convert-VideoToHEVC.ps1 -crf 20 -preset slow`n`n# Use a preset profile`n.\Convert-VideoToHEVC.ps1 -Profile Animation</code></pre><button class=`"copy-btn`" onclick=`"copyCode(this)`">Copy</button></div><h2>Requirements</h2><ul><li>PowerShell 5.1 or later</li><li>FFmpeg with libx265 support</li><li>Windows 10/11 (or PowerShell Core on other platforms)</li></ul><h2>Features</h2><div class=`"feature-grid`"><div class=`"feature`"><strong>Batch Processing</strong><br>Convert multiple files automatically with progress tracking</div><div class=`"feature`"><strong>Quality Presets</strong><br>Optimized settings for different content types</div><div class=`"feature`"><strong>Hardware Acceleration</strong><br>Support for NVENC, QSV, and other hardware encoders</div><div class=`"feature`"><strong>Quality Analysis</strong><br>VMAF, PSNR, and SSIM metrics for quality validation</div></div><h2>Use Cases</h2><ul><li><strong>Media Server Optimization</strong> - Convert movie collections for Plex, Jellyfin, or Emby</li><li><strong>Security Camera Storage</strong> - Reduce storage requirements for surveillance footage</li><li><strong>Mobile Device Preparation</strong> - Optimize videos for phones and tablets</li><li><strong>Archive Management</strong> - Preserve old content with minimal quality loss</li><li><strong>Streaming Preparation</strong> - Prepare content for web streaming platforms</li></ul><h2>Available Scripts</h2><div class=`"script-grid`">"
          
          foreach ($script in $scripts) {
              if (Test-Path $script.Path) {
                  $indexHtml += "<div class=`"script-card`"><div class=`"script-title`">$($script.Name)</div><div class=`"script-description`">$($script.Description)</div><a href=`"./$($script.Name).html`" class=`"script-link`">View Documentation</a></div>"
              }
          }
          
          $indexHtml += "</div><footer><p>Documentation generated on $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')</p></footer></div><script>function toggleTheme(){const html=document.documentElement;const btn=document.querySelector('.theme-toggle');if(html.getAttribute('data-theme')==='dark'){html.removeAttribute('data-theme');btn.textContent='🌙 Dark';localStorage.setItem('theme','light');}else{html.setAttribute('data-theme','dark');btn.textContent='☀️ Light';localStorage.setItem('theme','dark');}}function copyCode(btn){const code=btn.previousElementSibling.textContent;navigator.clipboard.writeText(code).then(()=>{btn.textContent='Copied!';setTimeout(()=>btn.textContent='Copy',2000);});}if(localStorage.getItem('theme')==='dark'){document.documentElement.setAttribute('data-theme','dark');document.querySelector('.theme-toggle').textContent='☀️ Light';}</script></body></html>"
          
          Set-Content -Path ./docs/index.html -Value $indexHtml

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          force_orphan: true

name: Generate Documentation

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy-docs:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Execution Policy
        shell: pwsh
        run: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser

      - name: Install platyPS module
        shell: pwsh
        run: Install-Module -Name platyPS -Force -Scope CurrentUser -AllowClobber

      - name: Create docs directory
        shell: pwsh
        run: |
          if (-not (Test-Path ./docs)) {
              New-Item -Path ./docs -ItemType Directory -Force
          }

      - name: Generate Script Documentation (Custom for .ps1 files)
        shell: pwsh
        run: |
          # Function to extract comment-based help and format it as basic Markdown
          function Convert-CommentHelpToMarkdown {
              param (
                  [Parameter(Mandatory=$true)]
                  [string]$ScriptPath,
                  [Parameter(Mandatory=$true)]
                  [string]$OutputFilePath
              )

              $scriptContent = Get-Content $ScriptPath -Raw
              $markdownContent = ""

              # Regex to find the entire comment-based help block
              if ($scriptContent -match '(?smi)^\s*<#\s*(.*?)\s*#>(\r?\n|\r)') {
                  $commentBlock = $matches[1]

                  # Add a main heading for the script
                  $scriptName = [System.IO.Path]::GetFileNameWithoutExtension($ScriptPath)
                  $markdownContent += "# $scriptName`n`n"

                  # Process each line of the comment block
                  $commentBlockLines = $commentBlock -split "`r?`n"
                  foreach ($line in $commentBlockLines) {
                      $trimmedLine = $line.Trim()

                      # Handle SYNOPSIS, DESCRIPTION, NOTES
                      if ($trimmedLine -match '^\.SYNOPSIS\s*(.*)') {
                          $markdownContent += "## Synopsis`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      } elseif ($trimmedLine -match '^\.DESCRIPTION\s*(.*)') {
                          $markdownContent += "## Description`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      } elseif ($trimmedLine -match '^\.NOTES\s*(.*)') {
                          $markdownContent += "## Notes`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      }
                      # Handle PARAMETER
                      elseif ($trimmedLine -match '^\.PARAMETER\s+(\S+)\s*(.*)') {
                          $paramName = $matches[1]
                          $paramDesc = $matches[2].Trim()
                          $markdownContent += "### Parameter: `$paramName`n`n"
                          $markdownContent += "$paramDesc`n`n"
                      }
                      # Handle EXAMPLE
                      elseif ($trimmedLine -match '^\.EXAMPLE\s*(.*)') {
                          $markdownContent += "### Example`n`n"
                          $exampleContent = $matches[1].Trim()
                          # Capture subsequent lines as part of the example until another dot-directive or end of block
                          $exampleLines = @($exampleContent)
                          $i = [array]::IndexOf($commentBlockLines, $line) + 1
                          while ($i -lt $commentBlockLines.Length) {
                              $nextLine = $commentBlockLines[$i].Trim()
                              if ($nextLine -match '^\.[A-Z]+' -or $nextLine -eq '#>') {
                                  break
                              }
                              $exampleLines += $nextLine
                              $i++
                          }
                          $markdownContent += "```powershell`n"
                          $markdownContent += ($exampleLines -join "`n")
                          $markdownContent += "`n```n`n"
                      }
                      # Handle INPUTS, OUTPUTS
                      elseif ($trimmedLine -match '^\.INPUTS\s*(.*)') {
                          $markdownContent += "## Inputs`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      } elseif ($trimmedLine -match '^\.OUTPUTS\s*(.*)') {
                          $markdownContent += "## Outputs`n`n"
                          $markdownContent += "$($matches[1].Trim())`n`n"
                      }
                      # Add any other lines directly if they don't match a directive
                      elseif (-not ($trimmedLine -match '^\.[A-Z]+')) {
                          $markdownContent += "$trimmedLine`n"
                      }
                  }
              } else {
                  $markdownContent += "# $($scriptName)`n`n"
                  $markdownContent += "No comment-based help block found for this script.`n"
              }

              Set-Content -Path $OutputFilePath -Value $markdownContent -Encoding Utf8
          }

          # Define script paths
          $convertScriptPath = "./Scripts/Convert-VideoToHEVC.ps1"

          # Define output paths for documentation
          $convertDocPath = "./docs/Convert-VideoToHEVC.md"

          # Generate documentation for Convert-VideoToHEVC.ps1
          Write-Host "Generating documentation for $convertScriptPath..."
          Convert-CommentHelpToMarkdown -ScriptPath $convertScriptPath -OutputFilePath $convertDocPath

          # Create index.html as the main entry point
          $htmlContent = @"
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>PowerShell HEVC Converter Documentation</title>
              <style>
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
                      line-height: 1.6;
                      margin: 0;
                      padding: 20px;
                      background-color: #f4f7f6;
                      color: #333;
                  }
                  .container {
                      max-width: 900px;
                      margin: 20px auto;
                      background-color: #ffffff;
                      padding: 30px;
                      border-radius: 8px;
                      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
                  }
                  h1, h2, h3 {
                      color: #2c3e50;
                      border-bottom: 1px solid #eee;
                      padding-bottom: 10px;
                      margin-top: 30px;
                  }
                  h1 { font-size: 2.2em; }
                  h2 { font-size: 1.8em; }
                  h3 { font-size: 1.4em; }
                  ul {
                      list-style: none;
                      padding: 0;
                  }
                  ul li {
                      margin-bottom: 10px;
                  }
                  ul li a {
                      text-decoration: none;
                      color: #3498db;
                      font-weight: bold;
                      font-size: 1.1em;
                      transition: color 0.3s ease;
                  }
                  ul li a:hover {
                      color: #2980b9;
                  }
                  .footer {
                      margin-top: 40px;
                      padding-top: 20px;
                      border-top: 1px solid #eee;
                      text-align: center;
                      font-size: 0.9em;
                      color: #7f8c8d;
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>PowerShell HEVC Converter Documentation</h1>

                  <h2>Scripts</h2>
                  <ul>
                      <li><a href="./Convert-VideoToHEVC.md">Convert-VideoToHEVC.md</a> - Convert video files to HEVC (H.265) format.</li>
                  </ul>

                  <div class="footer">
                      <p>Documentation generated on $(Get-Date -Format "yyyy-MM-dd HH:mm").</p>
                  </div>
              </div>
          </body>
          </html>
          "@

          Set-Content -Path ./docs/index.html -Value $htmlContent -Encoding Utf8

      - name: Validate files
        shell: pwsh
        run: |
          Test-Path ./docs/index.html
          Test-Path ./docs/Convert-VideoToHEVC.md
    
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          force_orphan: true 
